// -----------------------------------------------------------------------------
// WRAPPER
// -----------------------------------------------------------------------------

.wrapper {
  @include media-breakpoint-up(md) {
    display: flex;
    align-items: flex-end;
    justify-content: flex-end;
    padding: 0 $size-8 $size-5;
    min-height: 100vh;
  }

  @include media-breakpoint-up(lg) {
    align-items: flex-start;
    padding-top: $size-line;
  }

  @include media-breakpoint-up(xl) {
    padding: $size-5 calc((61.8% - 64.2rem) / 2) $size-5 $size-8;
  }
}

// -----------------------------------------------------------------------------
// CONTAINER
// -----------------------------------------------------------------------------

.container {
  @include make-container-max-widths();

  padding-right: $size-2;
  padding-left: $size-2;
  margin-right: auto;
  margin-left: auto;
  width: 100%;

  @include media-breakpoint-up(sm) {
    padding-right: $size-3;
    padding-left: $size-3;
  }

  @include media-breakpoint-up(md) {
    padding-right: $size-4;
    padding-left: $size-4;
  }
}

// -----------------------------------------------------------------------------
// GRID / COLUMNS
// -----------------------------------------------------------------------------
// #region

// MARKUP
// <!-- image backgrounds are set to full-bleed sections -->
// section.section
//   .columns
//     .col-lg-full 12/12
//     <!-- here will be new row -->
//     .col-lg-1 1/12
//     .col-lg-11 11/12


// Use silent selector to gridify any page section: header, hero, featurettes,
// footer. Use it with row() function to use grid-template-areas or use .col
// classes
// See https://go.shr.lc/2XbDFmg https://go.shr.lc/2QiuqiD


// Side paddings and max-widths should be set in the parent .container

.grid,
%grid {
  display: grid;
  grid-gap: $size-1;
  grid-template-columns: repeat(4, 1fr);

  @include media-breakpoint-up(sm) {
    grid-template-columns: repeat(8, 1fr);
  }

  @include media-breakpoint-up(lg) {
    grid-template-columns: repeat(12, 1fr);
  }
}

.has-wide-gutters {
  grid-gap: $size-line;

  @include media-breakpoint-up(lg) {
    grid-gap: $size-4;
  }
}

.has-no-gutters {
  grid-gap: 0;
}

// grid item he doesn't need any special styling except width and/or starting
// position, e.g. offset
// grid-column-start: 2;

// ‚ö†Ô∏è Silent selector'—ã –Ω–µ –Ω—É–∂–Ω—ã ‚Äî —Ç.–∫. –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —à–∏—Ä–∏–Ω—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è,
// –≤ –æ—Å–Ω–æ–≤–Ω–æ–º, –≤ —Ä–∞–∑–¥–µ–ª–µ head. –ê silent selector'—ã –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ
// —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ. –ö —Ç–æ–º—É, –∂–µ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –º–∏–∫—Å–∏–Ω—ã, –ø–æ—Ç–æ–º—É
// —á—Ç–æ –∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º—É placeholder'–∞–º –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö
// —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤.

// ü§ì –í —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –º–æ–±–∏–ª–∫–∞—Ö,
// —Ç–∞–±–ª–µ—Ç–∫–∞—Ö –∏ –ü–ö, —è—á–µ–π–∫–µ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã col- –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
// —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã —è—á–µ–π–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∑–∞–Ω–∏–º–∞–ª–∞ –≤—Å—é
// —à–∏—Ä–∏–Ω—É, –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–µ ‚Äî –ø–æ–ª–æ–≤–∏–Ω—É —à–∏—Ä–∏–Ω—ã, –∞ –Ω–∞ –ü–ö ‚Äî —Ç—Ä–µ—Ç—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
// –∫–ª–∞—Å—Å col-4. –ò–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É grid-column: span 4.
// .feature { grid-column: span 4; }

.col-1 {
  grid-column: span 1;
}

.col-2
.col-half {
  grid-column: span 2;
}

.col-3 {
  grid-column: span 3;
}

.col-4,
.col-full {
  grid-column: span 4;
}

@include media-breakpoint-up(sm) {
  .col-sm-1 {
    grid-column: span 1;
  }

  .col-sm-2 {
    grid-column: span 2;
  }

  .col-sm-3 {
    grid-column: span 3;
  }

  .col-sm-4,
  .col-sm-half {
    grid-column: span 4;
  }

  .col-sm-5 {
    grid-column: span 5;
  }

  .col-sm-6 {
    grid-column: span 6;
  }

  .col-sm-7 {
    grid-column: span 7;
  }

  .col-sm-8,
  .col-sm-full {
    grid-column: span 8;
  }
}

@include media-breakpoint-up(md) {
  .col-md-1 {
    grid-column: span 1;
  }

  .col-md-2 {
    grid-column: span 2;
  }

  .col-md-3 {
    grid-column: span 3;
  }

  .col-md-4,
  .col-md-half {
    grid-column: span 4;
  }

  .col-md-5 {
    grid-column: span 5;
  }

  .col-md-6 {
    grid-column: span 6;
  }

  .col-md-7 {
    grid-column: span 7;
  }

  .col-md-8,
  .col-md-full {
    grid-column: span 8;
  }
}

@include media-breakpoint-up(lg) {
  .col-lg-1 {
    grid-column: span 1;
  }

  .col-lg-2 {
    grid-column: span 2;
  }

  .col-lg-3,
  .col-lg-quoter {
    grid-column: span 3;
  }

  .col-lg-4,
  .col-lg-third {
    grid-column: span 4;
  }

  .col-lg-5 {
    grid-column: span 5;
  }

  .col-lg-6,
  .col-lg-half {
    grid-column: span 6;
  }

  .col-lg-7 {
    grid-column: span 7;
  }

  .col-lg-8,
  .col-lg-2-thirds {
    grid-column: span 8;
  }

  .col-lg-9,
  .col-lg-3-quoters {
    grid-column: span 9;
  }

  .col-lg-10 {
    grid-column: span 10;
  }

  .col-lg-11 {
    grid-column: span 11;
  }

  .col-lg-12,
  .col-lg-full {
    grid-column: span 12;
  }
}
// #endregion: grid


// -----------------------------------------------------------------------------
// TIPS
// -----------------------------------------------------------------------------
// #region

// üîµ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã –±–ª–æ–∫–æ–≤.
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç—Ä–æ–∫, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ
// –±–ª–æ–∫–∞ –≤ –º–∞–∫–µ—Ç–µ ‚Äî —Ç–æ, —á—Ç–æ –≤–æ flex –¥–µ–ª–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ order
// .main {
//   grid-column: 4/13;
//   grid-row: 2/4;
// }

// üîµ –®–∏—Ä–∏–Ω–∞ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª–æ–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
// grid-column-start –∏ grid-column-end. –õ–∏–±–æ –ø–æ—Ä—è–¥–∫–æ–º —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–æ–º
// grid-column: span *;

// üîµ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º, –≤–ø–∏—Å–∞–Ω–Ω—ã–º –≤ —Å–µ—Ç–∫—É, –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è object-fit: cover.

// üîµ –î–ª—è –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤ –±–ª–æ–∫–æ–≤ –ø–æ–ª–Ω–æ–π —à–∏—Ä–∏–Ω—ã –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
// margin-{right|left}: calc(50% - 50vw).

// #endregion: tips

// -----------------------------------------------------------------------------
// SNIPPETS
// -----------------------------------------------------------------------------
// #region

// .container {
//   padding: 0 ($size-1 * 2.5);

//   @include media-breakpoint-up(lg) {
//     display: grid;
//   }
// }

// // Main layout
// .container.is-main {
//   @include media-breakpoint-up(lg) {
//     grid-template-columns: repeat(12, 1fr);
//     grid-template-rows:
//       [header] 100px
//       [hero] 560px
//       auto
//       [footer] 100px;
//   }
// }

// // Main layout with sidebar
// .container.has-right-sidebar {
//   @include media-breakpoint-up(lg) {
//     grid-template-columns: auto $width-sm;
//   }
// }

// @include media-breakpoint-up(lg) {
//   .container.has-article {
//     display: grid;
//     grid-gap: $spacer-sm;
//     grid-template-rows:
//       [header] 100px
//       [body] auto
//       [footer] 100px;
//     grid-template-columns:
//       [left-gutter] 1fr
//       [content] 8fr
//       [sidebar] 4fr
//       [right-gutter] 1fr;
//     padding: 0;
//   }

//   .header {
//     grid-column: sidebar / right-gutter;
//     grid-row: header;
//   }

//   .content {
//     display: grid;

//     // Main grid position
//     grid-column: content;
//     grid-row: body;

//     // Nested grid
//     grid-gap: $spacer-sm;
//     grid-template-columns:
//       [left-gutter] 1fr
//       [article] 4fr
//       [aside] 2fr
//       [right-gutter] 1fr;
//   }

//   .article {
//     grid-column: article;
//   }

//   .aside {
//     grid-column: aside;
//   }

//   .sidebar {
//     grid-column: sidebar;
//     grid-row: body;
//   }
// }

// .grid.is-mosaic {
//   grid-gap: ($size-1 / 2);
//   overflow: hidden;

//   // –ö–æ–ª–æ–Ω–∫–∏. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–π ‚Äî 200px. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ‚Äî –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–µ
//   // 200, —á—Ç–æ–±—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–Ω—è–ª–∏ –≤—Å—é —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
//   grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));

//   // –í–∞—Ä–∏–∞–Ω—Ç —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —ç–ª–∞—Å—Ç–∏—á–Ω—ã—Ö –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
//   // grid-template-columns: repeat(auto-fit, minmax(300px, 1fr) 150px);

//   // dense - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ
//   // –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–µ—Ç–∫–∏.
//   // ‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∞—Ä—É—à–µ–Ω–∏—é –ø–æ—Ä—è–¥–∫–∞, —Ç.–∫. —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç
//   // –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–º–µ—Ä—É, –∞ –Ω–µ –ø–æ –º–µ—Å—Ç—É –≤ –∫–æ–¥–µ
//   // –ï—Å–ª–∏ dense, column, row –∏–ª–∏ —Å–æ—á–µ—Ç–∞–Ω–∏—è —ç—Ç–∏—Ö –∫–ª—é—á–µ–π –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –±—Ä–∞—É–∑–µ—Ä
//   // —Ä–∞–∑–º–µ—Å—Ç–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö
//   // —è—á–µ–µ–∫.
//   grid-auto-flow: dense;
// }

// // –®–∏—Ä–æ–∫–∏–π –º–æ–¥—É–ª—å
// .grid__item:nth-of-type(3n) {
//   grid-column: span 2;
// }

// // –í—ã—Å–æ–∫–∏–π –º–æ–¥—É–ª—å
// .grid__item:nth-of-type(5n) {
//   grid-row: span 2;
// }

// –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
// body {
//   display: flex;
//   align-items: center;
//   justify-content: center;

//   @supports (place-items: center center) {
//     display: grid;
//     place-items: center center;
//   }
// }


// #endregion: snippets

// -----------------------------------------------------------------------------
// TODO: mixins
// -----------------------------------------------------------------------------
// #region

// Create maps and mixins to create column/w-*, offset and order classes

// @mixin make-col($size, $columns: $grid-columns) {
//   flex: 0 0 percentage($size / $columns);
//   // Add a `max-width` to ensure content within each column does not blow out
//   // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
//   // do not appear to require this.
//   max-width: percentage($size / $columns);
// }

// @mixin make-col-offset($size, $columns: $grid-columns) {
//   $num: $size / $columns;
//   margin-left: if($num == 0, 0, percentage($num));
// }

// @mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
//   // Common properties for all breakpoints
//   %grid-column {
//     position: relative;
//     width: 100%;
//     padding-right: $gutter / 2;
//     padding-left: $gutter / 2;
//   }

//   @each $breakpoint in map-keys($breakpoints) {
//     $infix: breakpoint-infix($breakpoint, $breakpoints);

//     // Allow columns to stretch full width below their breakpoints
//     @for $i from 1 through $columns {
//       .col#{$infix}-#{$i} {
//         @extend %grid-column;
//       }
//     }
//     .col#{$infix},
//     .col#{$infix}-auto {
//       @extend %grid-column;
//     }

//     @include media-breakpoint-up($breakpoint, $breakpoints) {
//       // Provide basic `.col-{bp}` classes for equal-width flexbox columns
//       .col#{$infix} {
//         flex-basis: 0;
//         flex-grow: 1;
//         max-width: 100%;
//       }
//       .col#{$infix}-auto {
//         flex: 0 0 auto;
//         width: auto;
//         max-width: 100%; // Reset earlier grid tiers
//       }

//       @for $i from 1 through $columns {
//         .col#{$infix}-#{$i} {
//           @include make-col($i, $columns);
//         }
//       }

//       .order#{$infix}-first { order: -1; }

//       .order#{$infix}-last { order: $columns + 1; }

//       @for $i from 0 through $columns {
//         .order#{$infix}-#{$i} { order: $i; }
//       }

//       // `$columns - 1` because offsetting by the width of an entire row isn't possible
//       @for $i from 0 through ($columns - 1) {
//         @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
//           .offset#{$infix}-#{$i} {
//             @include make-col-offset($i, $columns);
//           }
//         }
//       }
//     }
//   }
// }

// –ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å css properties

// Calc + Custom Properties == Grids!
// media-queries can change settings

// :root {
//   --columns: 4;
//   --gutters: .5em;

//   @include media-breakpoint-up(sm) {
//     --columns: 8;
//   }

//   @include media-breakpoint-up(lg) {
//     --columns: 12;
//   }
// }

// .col {
//   flex-basis: 0;
//   flex-grow: 1;
//   max-width: 100%;
// }

// .col-auto {
//   flex: 0 0 auto;
//   width: auto;
//   max-width: 100%;
// }

// .col-1 {
//   flex: 0 0 percentage(1/12);
//   max-width: percentage(1/12);
// }

// .col-2 {
//   flex: 0 0 percentage(2/12);
//   max-width: percentage(2/12);
// }

// .col-12 {
//   flex: 0 0 100%;
//   max-width: 100%;
// }

// .order-first {
//   order: -1;
// }

// .order-last {
//   order: 13;
// }

// .order-0 {
//   order: 0;
// }

// .order-1 {
//   order: 1;
// }

// .order-2 {
//   order: 2;
// }

// .order-12 {
//   -ms-flex-order: 12;
//   order: 12;
// }

// // etc

// .offset-1 {
//   margin-left: percentage(1/12);
// }

// .offset-2 {
//   margin-left: percentage(2/12);
// }

// // etc

// .offset-11 {
//   margin-left: percentage(2/12);
// }

// @include media-breakpoint-up(sm) {

//   .col-sm {
//     flex-basis: 0;
//     flex-grow: 1;
//     max-width: 100%;
//   }

//   .col-sm-auto {
//     flex: 0 0 auto;
//     width: auto;
//     max-width: 100%;
//   }

//   .col-sm-1 {
//     flex: 0 0 percentage(1/12);
//     max-width: percentage(1/12);
//   }

//   .col-sm-2 {
//     flex: 0 0 percentage(2/12);
//     max-width: percentage(2/12);
//   }
//   // etc including order and offset
// }

// // etc: md, lg, xl

// #endregion: todo
